'''
The sequence of triangle numbers is 
generated by adding the natural numbers. 

So the 7th triangle number would be 
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 

The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first 
seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle 
number to have over five divisors.

What is the value of the first triangle 
number to have over five hundred divisors?
'''
tri_list = [1, 3]
def triangle_num():
    while len(tri_list) < 4000:
        i = tri_list[-1] + (len(tri_list) + 1)
        tri_list.append(i)
triangle_num()
num = tri_list[-1]
print('The triangle number is', num)

print('This is the',len(tri_list),'th','triangle number')

#return number of divisors in x
def print_factors(x):
    fac_list = []
    for i in range(1, x + 1):
        if x % i == 0:
            fac_list.append(i)
    print('Number of divisors:', len(fac_list))
print_factors(num)